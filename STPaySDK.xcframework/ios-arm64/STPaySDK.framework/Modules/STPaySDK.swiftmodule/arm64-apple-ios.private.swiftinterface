// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios16.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name STPaySDK
import AVFoundation
import ActiveLabel
import Alamofire
import BEMCheckBox
import BetterSegmentedControl
import CommonCrypto
import Contacts
import CoreGraphics
import DeveloperToolsSupport
import Foundation
@_exported import HotSwiftUI
import IQKeyboardManagerSwift
import IQKeyboardToolbarManager
import JTAppleCalendar
import Kingfisher
import LocalAuthentication
import Lottie
import MBProgressHUD
import MapKit
import MessageUI
import PanModal
import PaymentSDK
import PhotosUI
import QuartzCore
@_exported import STPaySDK
import SVPinView
import SkeletonView
import Swift
import SwiftKeychainWrapper
import SwiftUI
import SwiftUICore
import SwiftyUserDefaults
import UIKit
import UserNotifications
import Vision
import WebKit
import XLPagerTabStrip
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public typealias GradientColors = (top: UIKit.UIColor, bottom: UIKit.UIColor)
extension UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func setImageForName(_ string: Swift.String, backgroundColor: UIKit.UIColor? = nil, circular: Swift.Bool, textAttributes: [Foundation.NSAttributedString.Key : Swift.AnyObject]?, gradient: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func setImageForName(_ string: Swift.String, gradientColors: STPaySDK.GradientColors, circular: Swift.Bool, textAttributes: [Foundation.NSAttributedString.Key : Swift.AnyObject]?)
}

final public class ObjectAssociation<T> where T : AnyObject {
  public init(policy: ObjectiveC.objc_AssociationPolicy = .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
  final public subscript(index: Swift.AnyObject) -> T? {
    get
    set
  }
  @objc deinit
}
@objc public protocol PuiSegmentedControlDelegate : ObjectiveC.NSObjectProtocol {
  @objc func segmentedControlTransitionBegin(oldValue: Swift.Int, newValue: Swift.Int)
  @objc func segmentedControlTransitionEnded(oldValue: Swift.Int, newValue: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class PuiSegmentedControl : UIKit.UIControl {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var animatedTabTransitionDuration: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var animatedTabTransitionRedrawDifferenceDuration: Swift.Double
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var backgroundCornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var backgroundCustomColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var borderCornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var borderColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var borderWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var unselectedViewBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var unselectedViewMargins: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var unselectedTextAttributes: [Foundation.NSAttributedString.Key : Any]?
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var selectedViewBackgroundColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var selectedViewCornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var selectedViewMargins: UIKit.UIEdgeInsets
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var selectedTextAttributes: [Foundation.NSAttributedString.Key : Any]
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var selectedIndex: Swift.Int {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var seperatorColor: UIKit.UIColor
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var seperatorCornerRadius: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var seperatorWidth: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var seperatorMarginBottom: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var seperatorMarginTop: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var isAnimatedTabTransition: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var isSelectViewAllCornerRadius: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var isEqualWidth: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic open var isSeperatorActive: Swift.Bool
  @_Concurrency.MainActor @preconcurrency open var items: [Swift.String] {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any STPaySDK.PuiSegmentedControlDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func scrollSegmentedControl(ratio: CoreFoundation.CGFloat, nextViewSelectionThreshold: CoreFoundation.CGFloat, currentIndex: Swift.Int, destinationIndex: Swift.Int)
  @_Concurrency.MainActor @preconcurrency public func scrollViewDidEndDecelerating(at index: Swift.Int)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class CustomInputTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency public var textInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func clearButtonRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @objc deinit
}
extension STPaySDK.CustomInputTextField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class PinCodeTextField : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any STPaySDK.PinCodeTextFieldDelegate)?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var underlineWidth: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var underlineHSpacing: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var underlineVMargin: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var characterLimit: Swift.Int {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var underlineHeight: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var placeholderText: Swift.String?
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var fontSize: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var textColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var placeholderColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var underlineColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var updatedUnderlineColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var secureText: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var needToUpdateUnderlines: Swift.Bool
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var characterBackgroundColor: UIKit.UIColor
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var characterBackgroundCornerRadius: CoreFoundation.CGFloat
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var highlightInputUnderline: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public var keyboardType: UIKit.UIKeyboardType
  @_Concurrency.MainActor @preconcurrency @objc public var keyboardAppearance: UIKit.UIKeyboardAppearance
  @_Concurrency.MainActor @preconcurrency @objc public var autocorrectionType: UIKit.UITextAutocorrectionType
  @_Concurrency.MainActor @preconcurrency public var font: UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency public var allowedCharacterSet: Foundation.CharacterSet
  @_Concurrency.MainActor @preconcurrency @objc public var textContentType: UIKit.UITextContentType!
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var inputView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @IBOutlet @_Concurrency.MainActor @preconcurrency @objc override dynamic open var inputAccessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc public var isSecureTextEntry: Swift.Bool {
    @objc get
    @objc(setSecureTextEntry:) set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @discardableResult
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @discardableResult
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
}
extension STPaySDK.PinCodeTextField : UIKit.UIKeyInput {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public var hasText: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func insertText(_ charToInsert: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func deleteBackward()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class RoundTextField : UIKit.UITextField {
  @_Concurrency.MainActor @preconcurrency public var textInsets: UIKit.UIEdgeInsets {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func placeholderRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func clearButtonRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @objc deinit
}
extension STPaySDK.RoundTextField : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
}
public protocol PinCodeTextFieldDelegate : AnyObject {
  func textFieldShouldBeginEditing(_ textField: STPaySDK.PinCodeTextField) -> Swift.Bool
  func textFieldDidBeginEditing(_ textField: STPaySDK.PinCodeTextField)
  func textFieldValueChanged(_ textField: STPaySDK.PinCodeTextField)
  func textFieldShouldEndEditing(_ textField: STPaySDK.PinCodeTextField) -> Swift.Bool
  func textFieldDidEndEditing(_ textField: STPaySDK.PinCodeTextField)
  func textFieldShouldReturn(_ textField: STPaySDK.PinCodeTextField) -> Swift.Bool
}
extension STPaySDK.PinCodeTextFieldDelegate {
  public func textFieldShouldBeginEditing(_ textField: STPaySDK.PinCodeTextField) -> Swift.Bool
  public func textFieldDidBeginEditing(_ textField: STPaySDK.PinCodeTextField)
  public func textFieldValueChanged(_ textField: STPaySDK.PinCodeTextField)
  public func textFieldShouldEndEditing(_ textField: STPaySDK.PinCodeTextField) -> Swift.Bool
  public func textFieldDidEndEditing(_ textField: STPaySDK.PinCodeTextField)
  public func textFieldShouldReturn(_ textField: STPaySDK.PinCodeTextField) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class CustomTextfield : STPaySDK.TextFieldEffects {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var borderInactiveColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var borderActiveColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var leftImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var placeholderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic open var placeholderFontScale: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var bounds: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency override open func drawViewsForRect(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency override open func animateViewsForTextEntry()
  @_Concurrency.MainActor @preconcurrency override open func animateViewsForTextDisplay()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func editingRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func textRect(forBounds bounds: CoreFoundation.CGRect) -> CoreFoundation.CGRect
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class TextFieldEffects : UIKit.UITextField {
  public enum AnimationType : Swift.Int {
    case textEntry
    case textDisplay
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public typealias AnimationCompletionHandler = (_ type: STPaySDK.TextFieldEffects.AnimationType) -> ()
  @_Concurrency.MainActor @preconcurrency final public let placeholderLabel: UIKit.UILabel
  @_Concurrency.MainActor @preconcurrency open func animateViewsForTextEntry()
  @_Concurrency.MainActor @preconcurrency open func animateViewsForTextDisplay()
  @_Concurrency.MainActor @preconcurrency open var animationCompletionHandler: STPaySDK.TextFieldEffects.AnimationCompletionHandler?
  @_Concurrency.MainActor @preconcurrency open func drawViewsForRect(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency open func updateViewsForBoundsChange(_ bounds: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func drawPlaceholder(in rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView!)
  @objc @_Concurrency.MainActor @preconcurrency open func textFieldDidBeginEditing()
  @objc @_Concurrency.MainActor @preconcurrency open func textFieldDidEndEditing()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class QRScannerOverlay : AVFoundation.AVCaptureVideoPreviewLayer {
  public var cornerLength: CoreFoundation.CGFloat
  public var lineWidth: CoreFoundation.CGFloat
  public var lineColor: UIKit.UIColor
  public var lineCap: QuartzCore.CAShapeLayerLineCap
  public var maskSize: CoreFoundation.CGSize
  public var rectOfInterest: CoreFoundation.CGRect {
    get
  }
  @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic public func draw(in ctx: CoreGraphics.CGContext)
  @objc override dynamic public init(session: AVFoundation.AVCaptureSession)
  @available(iOS 8.0, *)
  @objc override dynamic public init(sessionWithNoConnection session: AVFoundation.AVCaptureSession)
  @objc override dynamic public init()
  @objc override dynamic public init(layer: Any)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}

@_hasMissingDesignatedInitializers public class Toast {
  public enum Direction {
    case top, bottom
    public static func == (a: STPaySDK.Toast.Direction, b: STPaySDK.Toast.Direction) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AnimationType {
    case slide(currentX: CoreFoundation.CGFloat, currentY: CoreFoundation.CGFloat)
    case fade(alphaValue: CoreFoundation.CGFloat)
    case scaleAndSlide(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat, currentX: CoreFoundation.CGFloat, currentY: CoreFoundation.CGFloat)
    case scale(scaleX: CoreFoundation.CGFloat, scaleY: CoreFoundation.CGFloat)
    case custom(transformation: CoreFoundation.CGAffineTransform)
    case `default`
  }
  public static var defaultImageTint: UIKit.UIColor {
    get
  }
  final public let view: any STPaySDK.ToastView
  weak public var delegate: (any STPaySDK.ToastDelegate)?
  public static func text(_ title: Foundation.NSAttributedString, subtitle: Foundation.NSAttributedString? = nil, config: STPaySDK.ToastConfiguration = ToastConfiguration()) -> STPaySDK.Toast
  public static func text(_ title: Swift.String, subtitle: Swift.String? = nil, config: STPaySDK.ToastConfiguration = ToastConfiguration()) -> STPaySDK.Toast
  public static func `default`(image: UIKit.UIImage, imageTint: UIKit.UIColor? = defaultImageTint, title: Foundation.NSAttributedString, subtitle: Foundation.NSAttributedString? = nil, config: STPaySDK.ToastConfiguration = ToastConfiguration()) -> STPaySDK.Toast
  public static func `default`(image: UIKit.UIImage, imageTint: UIKit.UIColor? = defaultImageTint, title: Swift.String, subtitle: Swift.String? = nil, config: STPaySDK.ToastConfiguration = ToastConfiguration()) -> STPaySDK.Toast
  public static func custom(view: any STPaySDK.ToastView, config: STPaySDK.ToastConfiguration = ToastConfiguration()) -> STPaySDK.Toast
  required public init(view: any STPaySDK.ToastView, config: STPaySDK.ToastConfiguration)
  public func show(haptic type: UIKit.UINotificationFeedbackGenerator.FeedbackType, after time: Foundation.TimeInterval = 0)
  public func show(after delay: Foundation.TimeInterval = 0)
  public func close(completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
public protocol ToastView : UIKit.UIView {
  func createView(for toast: STPaySDK.Toast)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class IconAppleToastView : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public var defaultImageTint: UIKit.UIColor {
    get
  }
  @_Concurrency.MainActor @preconcurrency public init(image: UIKit.UIImage, imageTint: UIKit.UIColor? = .black, title: Foundation.NSAttributedString, subtitle: Foundation.NSAttributedString? = nil)
  @_Concurrency.MainActor @preconcurrency public init(image: UIKit.UIImage, imageTint: UIKit.UIColor? = .label, title: Swift.String, subtitle: Swift.String? = nil)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class AppleToastView : UIKit.UIView, STPaySDK.ToastView {
  @_Concurrency.MainActor @preconcurrency public init(child: UIKit.UIView, minHeight: CoreFoundation.CGFloat = 58, minWidth: CoreFoundation.CGFloat = 150, darkBackgroundColor: UIKit.UIColor = UIColor(red: 0.13, green: 0.13, blue: 0.13, alpha: 1.00), lightBackgroundColor: UIKit.UIColor = UIColor(red: 0.99, green: 0.99, blue: 0.99, alpha: 1.00))
  @_Concurrency.MainActor @preconcurrency public func createView(for toast: STPaySDK.Toast)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class TextToastView : UIKit.UIStackView {
  @_Concurrency.MainActor @preconcurrency public init(_ title: Foundation.NSAttributedString, subtitle: Foundation.NSAttributedString? = nil)
  @_Concurrency.MainActor @preconcurrency public init(_ title: Swift.String, subtitle: Swift.String? = nil)
  @objc deinit
}


public struct ToastConfiguration {
  public let direction: STPaySDK.Toast.Direction
  public let autoHide: Swift.Bool
  public let enablePanToClose: Swift.Bool
  public let displayTime: Foundation.TimeInterval
  public let animationTime: Foundation.TimeInterval
  public let enteringAnimation: STPaySDK.Toast.AnimationType
  public let exitingAnimation: STPaySDK.Toast.AnimationType
  public let view: UIKit.UIView?
  public init(direction: STPaySDK.Toast.Direction = .top, autoHide: Swift.Bool = true, enablePanToClose: Swift.Bool = true, displayTime: Foundation.TimeInterval = 4, animationTime: Foundation.TimeInterval = 0.2, enteringAnimation: STPaySDK.Toast.AnimationType = .default, exitingAnimation: STPaySDK.Toast.AnimationType = .default, attachTo view: UIKit.UIView? = nil)
}


@_hasMissingDesignatedInitializers public class TimeManager {
  public static let shared: STPaySDK.TimeManager
  public func resetTimer()
  public func restartTimer()
  public func recheckTimer()
  @objc deinit
}
public enum DateFormatType : Swift.CaseIterable {
  public static var allCases: [STPaySDK.DateFormatType] {
    get
  }
  public typealias AllCases = [STPaySDK.DateFormatType]
  case isoYear
  case isoYearMonth
  case isoDateWithSlash
  case isoDate
  case isoDateTime
  case isoDateTimeSec
  case isoDateTimeMilliSec
  case isoDateCustomTimeMilliSec
  case dotNet
  case rss
  case altRSS
  case httpHeader
  case standard
  case shortDate
  case shortDateWithYearQuote
  case shortDateWithdatequote
  case shortDateFullYear
  case isoDateTimeWithoutOffset
  case timeIn12Hr
  case hotelDateSearch
  case custom(Swift.String)
  public var stringFormat: Swift.String {
    get
  }
}
extension STPaySDK.DateFormatType : Swift.Equatable {
  public static func == (lhs: STPaySDK.DateFormatType, rhs: STPaySDK.DateFormatType) -> Swift.Bool
}
public enum TimeZoneType {
  case local, `default`, utc, bd, custom(Swift.Int)
}
public enum RelativeTimeStringType {
  case nowPast, nowFuture, secondsPast, secondsFuture, oneMinutePast, oneMinuteFuture, minutesPast, minutesFuture, oneHourPast, oneHourFuture, hoursPast, hoursFuture, oneDayPast, oneDayFuture, daysPast, daysFuture, oneWeekPast, oneWeekFuture, weeksPast, weeksFuture, oneMonthPast, oneMonthFuture, monthsPast, monthsFuture, oneYearPast, oneYearFuture, yearsPast, yearsFuture
  public static func == (a: STPaySDK.RelativeTimeStringType, b: STPaySDK.RelativeTimeStringType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateComparisonType {
  case isToday
  case isTomorrow
  case isYesterday
  case isSameDay(as: Foundation.Date)
  case isThisWeek
  case isNextWeek
  case isLastWeek
  case isSameWeek(as: Foundation.Date)
  case isThisMonth
  case isNextMonth
  case isLastMonth
  case isSameMonth(as: Foundation.Date)
  case isThisYear
  case isNextYear
  case isLastYear
  case isSameYear(as: Foundation.Date)
  case isInTheFuture
  case isInThePast
  case isEarlier(than: Foundation.Date)
  case isLater(than: Foundation.Date)
  case isWeekday
  case isWeekend
}
public enum DateComponentType {
  case second, minute, hour, day, weekday, nthWeekday, week, month, year
  public static func == (a: STPaySDK.DateComponentType, b: STPaySDK.DateComponentType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum DateForType {
  case startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, tomorrow, yesterday, nearestMinute(minute: Swift.Int), nearestHour(hour: Swift.Int)
}
public enum DateStyleType {
  case short
  case medium
  case long
  case full
  case ordinalDay
  case weekday
  case shortWeekday
  case veryShortWeekday
  case month
  case shortMonth
  case veryShortMonth
  public static func == (a: STPaySDK.DateStyleType, b: STPaySDK.DateStyleType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension QuartzCore.CALayer {
  public func addZeplinShadow(color: UIKit.UIColor = .black, alpha: Swift.Float = 0.5, x: CoreFoundation.CGFloat = 0, y: CoreFoundation.CGFloat = 3, blur: CoreFoundation.CGFloat = 6, spread: CoreFoundation.CGFloat = 0)
}


public enum HorizontalAlignment {
  case left
  case right
  case leading
  case trailing
  case justified
  public static func == (a: STPaySDK.HorizontalAlignment, b: STPaySDK.HorizontalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum VerticalAlignment {
  case top
  case center
  case bottom
  public static func == (a: STPaySDK.VerticalAlignment, b: STPaySDK.VerticalAlignment) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency open class AlignedCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  @_Concurrency.MainActor @preconcurrency public var horizontalAlignment: STPaySDK.HorizontalAlignment
  @_Concurrency.MainActor @preconcurrency public var verticalAlignment: STPaySDK.VerticalAlignment
  @_Concurrency.MainActor @preconcurrency public init(horizontalAlignment: STPaySDK.HorizontalAlignment = .justified, verticalAlignment: STPaySDK.VerticalAlignment = .center)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutAttributesForElements(in rect: CoreFoundation.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct OnFirstAppearModifier : SwiftUICore.ViewModifier {
  @_Concurrency.MainActor @preconcurrency public init(_ onFirstAppearAction: @escaping () async -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency public func body(content: STPaySDK.OnFirstAppearModifier.Content) -> some SwiftUICore.View
  
  public typealias Body = @_opaqueReturnTypeOf("$s8STPaySDK21OnFirstAppearModifierV4body7contentQr7SwiftUI05_ViewF8_ContentVyACG_tF", 0) __
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class STPayView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency open var isDebug: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func update()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension UIKit.UIImage {
  public func rounded(radius: CoreFoundation.CGFloat) -> UIKit.UIImage
}
public protocol ToastDelegate : AnyObject {
  func willShowToast(_ toast: STPaySDK.Toast)
  func didShowToast(_ toast: STPaySDK.Toast)
  func willCloseToast(_ toast: STPaySDK.Toast)
  func didCloseToast(_ toast: STPaySDK.Toast)
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class DGBottomSheet : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public init(view contentsView: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public func hide()
  @objc deinit
}



public enum ValidationRequiredRule : Swift.CaseIterable {
  case minimumLength
  case lowerCase
  case upperCase
  case digit
  case specialCharacter
  case oneUniqueCharacter
  public static func == (a: STPaySDK.ValidationRequiredRule, b: STPaySDK.ValidationRequiredRule) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [STPaySDK.ValidationRequiredRule]
  nonisolated public static var allCases: [STPaySDK.ValidationRequiredRule] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public enum PinRequiredRule : Swift.CaseIterable {
  case numeric
  case consecutive
  case notStartWithZero
  case notRepeatedCharacters
  public static func == (a: STPaySDK.PinRequiredRule, b: STPaySDK.PinRequiredRule) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [STPaySDK.PinRequiredRule]
  nonisolated public static var allCases: [STPaySDK.PinRequiredRule] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.URL {
  public var queryParameters: [Swift.String : Swift.String]? {
    get
  }
}
extension STPaySDK.TextFieldEffects.AnimationType : Swift.Equatable {}
extension STPaySDK.TextFieldEffects.AnimationType : Swift.Hashable {}
extension STPaySDK.TextFieldEffects.AnimationType : Swift.RawRepresentable {}
extension STPaySDK.Toast.Direction : Swift.Equatable {}
extension STPaySDK.Toast.Direction : Swift.Hashable {}
extension STPaySDK.RelativeTimeStringType : Swift.Equatable {}
extension STPaySDK.RelativeTimeStringType : Swift.Hashable {}
extension STPaySDK.DateComponentType : Swift.Equatable {}
extension STPaySDK.DateComponentType : Swift.Hashable {}
extension STPaySDK.DateStyleType : Swift.Equatable {}
extension STPaySDK.DateStyleType : Swift.Hashable {}
extension STPaySDK.HorizontalAlignment : Swift.Equatable {}
extension STPaySDK.HorizontalAlignment : Swift.Hashable {}
extension STPaySDK.VerticalAlignment : Swift.Equatable {}
extension STPaySDK.VerticalAlignment : Swift.Hashable {}
extension STPaySDK.OnFirstAppearModifier : Swift.Sendable {}
extension STPaySDK.ValidationRequiredRule : Swift.Equatable {}
extension STPaySDK.ValidationRequiredRule : Swift.Hashable {}
extension STPaySDK.PinRequiredRule : Swift.Equatable {}
extension STPaySDK.PinRequiredRule : Swift.Hashable {}
